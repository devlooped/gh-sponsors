namespace Devlooped.SponsorLink;

/// <summary>
/// Provides simplified access to the key environment variables.
/// </summary>
public static class Variables
{
    /// <summary>
    /// Last used access token to invoke SponsorLink backend APIs.
    /// </summary>
    public static string? AccessToken
    {
        get => Environment.GetEnvironmentVariable(Constants.AccessTokenVariable, EnvironmentVariableTarget.User) is string token ?
            !string.IsNullOrEmpty(token) ?
            token : null : null;
        set => Environment.SetEnvironmentVariable(Constants.AccessTokenVariable, value, EnvironmentVariableTarget.User);
    }

    /// <summary>
    /// Random GUID used for salting hashes. Unique per installation, can be 
    /// regenerated by deleting the environment variable.
    /// </summary>
    public static string? InstallationId
    {
        get => Environment.GetEnvironmentVariable(Constants.InstallationVariable, EnvironmentVariableTarget.User) is string id ?
            !string.IsNullOrEmpty(id) ?
            id : null : null;
        set => Environment.SetEnvironmentVariable(Constants.InstallationVariable, value, EnvironmentVariableTarget.User);
    }
        
    /// <summary>
    /// Gets the JWT token containing the hashed claims that represent 
    /// active sponsorships.
    /// </summary>
    public static string? Manifest
    {
        get => Environment.GetEnvironmentVariable(Constants.ManifestVariable, EnvironmentVariableTarget.User) is string manifest ?
            !string.IsNullOrEmpty(manifest) ?
            manifest : null : null;
        set => Environment.SetEnvironmentVariable(Constants.ManifestVariable, value, EnvironmentVariableTarget.User);
    }
}
